{"/home/travis/build/npmtest/node-npmtest-jslint/test.js":"/* istanbul instrument in package npmtest_jslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jslint/lib.npmtest_jslint.js":"/* istanbul instrument in package npmtest_jslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jslint = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jslint = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jslint/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jslint && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jslint */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jslint\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jslint.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_jslint.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jslint.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_jslint.__dirname +\n                    '/lib.npmtest_jslint.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/nodelint.js":"var con = console,\n    vm = require(\"vm\"),\n    fs = require(\"fs\"),\n    path = require('path'),\n    linter = require('./linter.js'),\n    main = require('./main.js'),\n    LintStream = require('./lintstream.js');\n\nexports.LintStream = LintStream;\n\nexports.linter = linter;\n\nexports.runMain = main.runMain;\n\nexports.setConsole = function (c) {\n    'use strict';\n    con = c;\n};\n\nfunction looksLikeFileName(edition) {\n    'use strict';\n\n    // contains .js or a path separator character '/' or '\\'\n    return (/\\.js|\\/|\\\\/).test(edition);\n}\nexports.looksLikeFileName = looksLikeFileName;\n\nexports.load = function (edition) {\n    'use strict';\n\n    var ctx = vm.createContext(),\n        fileName,\n        jslintSource;\n\n    function makePathFromName(name) {\n        return path.join(__dirname, name) + \".js\";\n    }\n\n    function makePathFromEdition(edition) {\n        return makePathFromName(\"jslint-\" + edition);\n    }\n\n    function read(name) {\n        return fs.readFileSync(name);\n    }\n\n\n    if (edition) {\n        if (looksLikeFileName(edition)) {\n            fileName = edition;\n        } else {\n            fileName = makePathFromEdition(edition);\n        }\n\n        try {\n            jslintSource = read(fileName);\n        } catch (err) {\n            con.warn(\"Unable to load edition \" + edition + \", reverting to default. \" + err);\n        }\n    }\n\n    if (!jslintSource) {\n        jslintSource = read(makePathFromName(\"jslint\"));\n    }\n\n    vm.runInContext(jslintSource, ctx);\n\n    if (!ctx.JSLINT) {\n        ctx.JSLINT = function JSLINT(script, options) {\n            var data = ctx.jslint(script, options, options.predef);\n            ctx.JSLINT.data = function () {\n                return data;\n            };\n        };\n        ctx.JSLINT.edition = ctx.jslint('').edition;\n    }\n\n    return ctx.JSLINT;\n\n};\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/linter.js":"function merge(source, add) {\n    'use strict';\n\n    var result = source || {};\n\n    if (!add) {\n        return result;\n    }\n\n    Object.keys(add).forEach(function (prop) {\n        if (!result.hasOwnProperty(prop)) {\n            result[prop] = add[prop];\n        }\n    });\n\n    return result;\n}\nexports.merge = merge;\n\nfunction preprocessScript(script) {\n    'use strict';\n\n    // Fix UTF8 with BOM\n    if (script.charCodeAt(0) === 0xFEFF) {\n        script = script.slice(1);\n    }\n\n    // remove shebang: replace it with empty line\n    script = script.replace(/^#!.*/, \"\");\n\n    return script;\n}\nexports.preprocessScript = preprocessScript;\n\nexports.doLint = function (jslint, script, options) {\n    'use strict';\n    var ok,\n        result;\n\n    script = preprocessScript(script);\n\n    ok = jslint(script, options);\n\n    result = jslint.data();\n    if (result.ok === undefined) {\n        result.ok = ok;\n    }\n    result.options = options;\n\n    // es6\n    result.errors = result.errors || result.warnings;\n\n    return result;\n};\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/main.js":"var nodelint = require('./nodelint');\nvar optModule = require('./options');\nvar nopt = require(\"nopt\");\nvar exit = require('exit'),\n    glob = require('glob');\n\nvar LintStream = require('./lintstream.js'),\n    ReportStream = require('./reportstream.js'),\n    CollectorStream = require('./collectorstream.js'),\n    JSONReportStream = require('./jsonreportstream.js'),\n    FileOpener = require('./fileopener.js');\n\nvar con = console;\nvar pro = process;\n\nexports.setConsole = function (c) {\n    'use strict';\n    con = c;\n};\n\nexports.setProcess = function (p) {\n    'use strict';\n    pro = p;\n    exit = pro.exit.bind(pro);\n};\n\nfunction commandOptions() {\n    'use strict';\n\n    var commandOpts = {\n            'indent': Number,\n            'maxerr': Number,\n            'maxlen': Number,\n            'predef': [String, Array],\n            'edition': String,\n            'config': String\n        },\n        /* flags defined in jslint-latest.js */\n        jslintFlags = [\n            'ass', 'bitwise', 'browser', 'closure', 'continue',\n            'debug', 'devel', 'eqeq', 'evil', 'forin', 'newcap',\n            'node', 'nomen', 'passfail', 'plusplus', 'properties',\n            'regexp', 'rhino', 'unparam', 'sloppy', 'stupid', 'sub',\n            'todo', 'vars', 'white'\n        ],\n        /* flags used by node-jslint to control output */\n        cliFlags = [\n            'json', 'color', 'terse', 'version', 'filter'\n        ],\n        /* not used by jslint-latest.js */\n        deprecatedFlags = [\n            'anon', 'es5', 'on', 'undef', 'windows'\n        ],\n        allFlags = jslintFlags.concat(cliFlags).concat(deprecatedFlags);\n\n    allFlags.forEach(function (option) {\n        commandOpts[option] = Boolean;\n    });\n\n    return commandOpts;\n}\nexports.commandOptions = commandOptions;\n\nfunction die(why) {\n    'use strict';\n    var o = commandOptions();\n    con.warn(why);\n    con.warn(\"Usage: \" + pro.argv[1] +\n            \" [--\" + Object.keys(o).sort().join(\"] [--\") +\n            \"] [--] <scriptfile>...\");\n    exit(1);\n}\n\nfunction parseArgs(argv) {\n    'use strict';\n    var args = nopt(commandOptions(), {}, argv);\n\n    if (args.filter === undefined) {\n        args.filter = true;\n    }\n\n    return args;\n}\nexports.parseArgs = parseArgs;\n\nexports.reportVersion = function reportVersion(callback, options) {\n    'use strict';\n    process.nextTick(function () {\n        var package_data = require('../package.json'),\n            version = package_data.version,\n            edition = nodelint.load(options.edition).edition;\n\n        callback(\"node-jslint version: \" + version + \"  JSLint edition \" + edition);\n    });\n\n};\n\nfunction expandGlob(glob) {\n    'use strict';\n\n    return function (pattern) {\n        return glob.sync(pattern);\n    };\n}\nexports.expandGlob = expandGlob;\n\nfunction noNodeModules(file) {\n    'use strict';\n    return file.indexOf('node_modules') === -1;\n}\nexports.noNodeModules = noNodeModules;\n\nfunction flatten(a, b) {\n    'use strict';\n\n    return a.concat(b);\n}\n\nfunction globFiles(list, glob, filter) {\n    'use strict';\n    var remain = [];\n\n    remain = list.map(expandGlob(glob))\n        .reduce(flatten, []);\n\n    if (filter) {\n        remain = remain.filter(noNodeModules);\n    }\n\n    return remain;\n}\nexports.globFiles = globFiles;\n\nfunction makeReporter(parsed) {\n    'use strict';\n    var reporter;\n\n    if (parsed.json) {\n        reporter = new JSONReportStream(parsed);\n    } else if (parsed.collector) {\n        reporter = new CollectorStream(parsed);\n    } else {\n        reporter = new ReportStream(parsed);\n    }\n\n    reporter.on('data', function (chunk) {\n        if (chunk === '.') {\n            pro.stderr.write(chunk);\n        } else {\n            con.log(chunk);\n        }\n    });\n\n    return reporter;\n}\nexports.makeReporter = makeReporter;\n\nexports.runMain = function (options, cb) {\n    'use strict';\n\n    if (options.version) {\n        exports.reportVersion(con.log, options);\n        return;\n    }\n\n    if (!options.argv.remain.length) {\n        die(\"No files specified.\");\n    }\n\n    var procOptions = optModule.getOptions(process.env.HOME, options),\n        files = globFiles(options.argv.remain, glob, options.filter),\n        opener = new FileOpener(),\n        linter = new LintStream(procOptions),\n        reporter = makeReporter(procOptions);\n\n    opener.pipe(linter);\n    linter.pipe(reporter);\n\n    reporter.on('finish', function () {\n        if (cb) {\n            return cb(null, reporter.lint);\n        }\n\n        if (reporter.allOK) {\n            return exit(0);\n        }\n        exit(1);\n    });\n\n    files.forEach(function (file) {\n        opener.write(file);\n    });\n    opener.end();\n};\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/options.js":"(function () {\n    'use strict';\n\n    var path = require('path'),\n        fs = require('fs'),\n        con = console;\n\n    exports.setConsole = function (c) {\n        con = c;\n    };\n\n    function merge(source, add) {\n        var result = source || {};\n\n        if (!add) {\n            return result;\n        }\n\n        Object.keys(add).forEach(function (prop) {\n            if (!result.hasOwnProperty(prop)) {\n                result[prop] = add[prop];\n            }\n        });\n\n        return result;\n    }\n    exports.merge = merge;\n\n    function loadAndParseConfig(filePath) {\n        try {\n            return JSON.parse(fs.readFileSync(filePath, \"utf-8\"));\n        } catch (err) {\n            if (filePath && err.code !== \"ENOENT\") {\n                con.warn('Error reading config file \"' + filePath + '\": ' + err);\n            }\n        }\n    }\n    exports.loadAndParseConfig = loadAndParseConfig;\n\n    function addDefaults(options) {\n\n        options = merge(options, {node: true, es5: true});\n\n        return options;\n    }\n\n    function notFalsy(n) {\n        return n;\n    }\n\n    function splitPredefs(options) {\n        if (!options.predef) {\n            return options;\n        }\n        if (Array.isArray(options.predef)) {\n            return options;\n        }\n\n        options.predef = options.predef.split(',').filter(notFalsy);\n\n        return options;\n    }\n\n    function preprocessOptions(options, config) {\n        options = merge({}, options);\n\n        options = merge(options, config);\n\n        options = addDefaults(options);\n\n        options = splitPredefs(options);\n\n        return options;\n    }\n\n    function mergeConfigs(home, project) {\n        var homeConfig,\n            cwdConfig,\n            config;\n\n        home.some(function (file) {\n            homeConfig = loadAndParseConfig(file);\n            return homeConfig;\n        });\n\n        project.some(function (file) {\n            cwdConfig = loadAndParseConfig(file);\n            return cwdConfig;\n        });\n\n        config = merge(cwdConfig, homeConfig);\n\n        return config;\n    }\n    exports.mergeConfigs = mergeConfigs;\n\n    function loadConfig(h, configFile) {\n        var home = h || '',\n            homeConfigs = ['.jslint.conf', '.jslintrc'],\n            projectConfigs = ['jslint.conf', '.jslint.conf', 'jslintrc', '.jslintrc'];\n\n        if (configFile) {\n            // explicitly specified config file overrides default config file name, path\n            homeConfigs = [configFile];\n        } else {\n            homeConfigs = homeConfigs.map(function (file) {\n                return path.join(home, file);\n            });\n        }\n\n        projectConfigs = projectConfigs.map(function (file) {\n            return path.join(process.cwd(), file);\n        });\n\n        return mergeConfigs(homeConfigs, projectConfigs);\n    }\n    exports.loadConfig = loadConfig;\n\n    function options_getOptions(homedir, options) {\n        var config = loadConfig(homedir, options.config);\n\n        return preprocessOptions(options, config);\n    }\n\n    exports.preprocessOptions = preprocessOptions;\n    exports.getOptions = options_getOptions;\n    exports.splitPredefs = splitPredefs;\n    exports.addDefaults = addDefaults;\n\n}());\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/lintstream.js":"// this file is lib/lintstream.js\n// provides a stream interface to JSLint\n//\n// Copyright 2014 Cubane Canada Inc.\n//\n// Released under modified MIT/BSD 3-clause license\n// See LICENSE for details.\n\n(function () {\n    'use strict';\n\n    var util = require('util'),\n        Transform = require('./stream').Transform,\n        nodelint = require('./nodelint'),\n        optModule = require('./options'),\n        linter = require('./linter'),\n        LintStream;\n\n    LintStream = function LintStream_constructor(options) {\n        if (!(this instanceof LintStream)) {\n            return new LintStream(options);\n        }\n        Transform.call(this, {objectMode: true});\n\n        // shallow copy options\n        options = optModule.merge({}, options);\n        this.JSlint = nodelint.load(options.edition);\n\n        // initialize members\n        this.options = options;\n        this.linter = linter;\n    };\n    util.inherits(LintStream, Transform);\n\n    function LintStream_transform(chunk, ignore, callback) {\n        var fileName = chunk.file,\n            body = chunk.body,\n            linted = this.linter.doLint(this.JSlint, body, this.options);\n\n        this.push({file: fileName, linted: linted});\n\n        callback();\n    }\n\n    LintStream.prototype._transform = LintStream_transform;\n\n    module.exports = LintStream;\n\n}());\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/stream.js":"module.exports = require('readable-stream');\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/reportstream.js":"// this file is lib/reportstream.js\n// provides a stream interface to JSLint\n//\n// Copyright 2014 Cubane Canada Inc.\n//\n// Released under modified MIT/BSD 3-clause license\n// See LICENSE for details.\n\n(function () {\n    'use strict';\n\n    var util = require('util'),\n        Transform = require('./stream').Transform,\n        reporter = require('./reporter'),\n        ReportStream;\n\n\n    ReportStream = function ReportStream_constructor(options) {\n        var stream = this;\n\n        if (!(this instanceof ReportStream)) {\n            return new ReportStream(options);\n        }\n\n        options = options || {};\n        options.objectMode = true;\n        Transform.call(this, options);\n\n        this.reporter = reporter.makeReporter(\n            {\n                log: function (s) {\n                    stream.emit('data', s);\n                },\n                err: function (s) {\n                    stream.emit('data', s);\n                }\n            },\n            options.color,\n            options.terse\n        );\n\n        this.allOK = true;\n\n    };\n    util.inherits(ReportStream, Transform);\n\n    function ReportStream_transform(chunk, ignore, callback) {\n        // chunk: a package of lint data from JSLint\n\n        this.reporter.report(chunk.file, chunk.linted);\n\n        this.allOK = this.allOK && chunk.linted.ok;\n\n        callback();\n    }\n\n    ReportStream.prototype._transform = ReportStream_transform;\n\n    module.exports = ReportStream;\n\n}());\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/reporter.js":"(function () {\n    'use strict';\n\n    var color = require(\"./color\");\n\n    exports.logger = {\n        log: (console.log).bind(console),\n        err: (process.stderr.write).bind(process.stderr)\n    };\n\n    exports.setLogger = function (l) {\n        this.logger = l;\n    };\n\n    exports.makeReporter = function (logger, colorize, terse) {\n        return {\n            logger: logger,\n            colorize: colorize,\n            terse: terse,\n            report: function (file, lint) {\n                return exports.report.call(this, file, lint, this.colorize, this.terse);\n            }\n        };\n    };\n\n    exports.report = function (file, lint, colorize, terse) {\n        var line,\n            pad,\n            errors,\n            fudge = Number(lint.option && lint.option.fudge) || 0,\n            logger = this.logger,\n            fileMessage;\n\n        function c(format, str) {\n            if (colorize) {\n                return color[format](str);\n            }\n            return str;\n        }\n\n        fileMessage = \"\\n\" + c('bold', file);\n\n        function row(e) {\n            return e.line + fudge;\n        }\n        function col(e) {\n            return (e.character || e.column) + fudge;\n        }\n        function evidence(e) {\n            return e.evidence || (lint.lines && lint.lines[e.line]) || '';\n        }\n        function message(e) {\n            return e.reason || e.message;\n        }\n\n        if (!lint.ok) {\n            // remove nulls\n            errors = lint.errors;// || lint.warnings;\n            errors = errors.filter(function (e) {\n                return e;\n            });\n\n            if (terse) {\n                errors.forEach(function (e) {\n                    logger.log(file + ':' + row(e) + ':' + col(e) + ': ' + message(e));\n                });\n            } else {\n                logger.log(fileMessage);\n                errors.forEach(function (e, i) {\n                    pad = \"#\" + String(i + 1);\n                    while (pad.length < 3) {\n                        pad = ' ' + pad;\n                    }\n                    line = ' // Line ' + row(e) + ', Pos ' + col(e);\n\n                    logger.log(pad + ' ' + c('yellow', message(e)));\n                    logger.log('    ' + evidence(e).trim() + c('grey', line));\n                });\n            }\n        } else {\n            if (terse) {\n                logger.err(\".\");\n            } else {\n                logger.log(fileMessage + \" is \" + c('green', 'OK') + \".\");\n            }\n        }\n\n        return lint.ok;\n    };\n\n}());\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/color.js":"function color(code, string) {\n    'use strict';\n    return \"\\u001b[\" + code + \"m\" + string + \"\\u001b[0m\";\n}\n\nfunction factory(code) {\n    'use strict';\n    return function (string) {\n        return color(code, string);\n    };\n}\n\nmodule.exports = {\n    bold: factory(1),\n    red: factory(31),\n    green: factory(32),\n    yellow: factory(33),\n    blue: factory(34),\n    grey: factory(90)\n};\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/collectorstream.js":"// this file is lib/collectorstream.js\n// provides a stream interface to JSLint\n//\n// Copyright 2014 Cubane Canada Inc.\n//\n// Released under modified MIT/BSD 3-clause license\n// See LICENSE for details.\n\n'use strict';\n\nvar util = require('util'),\n    Transform = require('./stream').Transform,\n    CollectorStream;\n\nCollectorStream = function CollectorStream_constructor(options) {\n    if (!(this instanceof CollectorStream)) {\n        return new CollectorStream(options);\n    }\n\n    Transform.call(this, {objectMode: true});\n\n    this.lint = [];\n\n    this.allOK = true;\n};\nutil.inherits(CollectorStream, Transform);\n\nfunction CollectorStream_transform(chunk, ignore, callback) {\n    // chunk: a package of lint data from JSLint\n    this.lint.push([chunk.file, chunk.linted.errors]);\n\n    this.allOK = this.allOK && chunk.linted.ok;\n\n    callback();\n}\n\nCollectorStream.prototype._transform = CollectorStream_transform;\n\nmodule.exports = CollectorStream;\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/jsonreportstream.js":"// this file is lib/reportstream.js\n// provides a stream interface to JSLint\n//\n// Copyright 2014 Cubane Canada Inc.\n//\n// Released under modified MIT/BSD 3-clause license\n// See LICENSE for details.\n\n(function () {\n    'use strict';\n\n    var util = require('util'),\n        Transform = require('./stream').Transform,\n        JSONReportStream;\n\n    JSONReportStream = function JSONReportStream_constructor(options) {\n        if (!(this instanceof JSONReportStream)) {\n            return new JSONReportStream(options);\n        }\n\n        Transform.call(this, {objectMode: true});\n\n        this.allOK = true;\n    };\n    util.inherits(JSONReportStream, Transform);\n\n    function JSONReportStream_transform(chunk, ignore, callback) {\n        // chunk: a package of lint data from JSLint\n        this.emit('data', JSON.stringify([chunk.file, chunk.linted.errors]));\n\n        this.allOK = this.allOK && chunk.linted.ok;\n\n        callback();\n    }\n\n    JSONReportStream.prototype._transform = JSONReportStream_transform;\n\n    module.exports = JSONReportStream;\n\n}());\n","/home/travis/build/npmtest/node-npmtest-jslint/jslint/lib/fileopener.js":"'use strict';\n\nvar util = require('util'),\n    Transform = require('./stream').Transform,\n    fs = require('fs');\n\nfunction FileOpener() {\n    Transform.call(this, {objectMode: true});\n}\n\nutil.inherits(FileOpener, Transform);\n\nfunction FileOpener_transform(file, ignore, callback) {\n    var stream = this;\n    fs.readFile(file, 'utf8', function (err, data) {\n        if (err) {\n            stream.emit('error', err);\n            return;\n        }\n\n        stream.push({file: file, body: data});\n        callback();\n    });\n}\n\nFileOpener.prototype._transform = FileOpener_transform;\n\nmodule.exports = FileOpener;\n\n"}